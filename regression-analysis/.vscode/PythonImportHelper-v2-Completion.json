[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "statsmodels.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statsmodels.api",
        "description": "statsmodels.api",
        "detail": "statsmodels.api",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "data = pd.read_csv('advertising_data_large.csv') \nX = data[['TV']] \ny = data['Sales']\nfrom sklearn.linear_model import LinearRegression \n# Fit model for Simple Linear Regression\nmodel = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X = data[['TV']] \ny = data['Sales']\nfrom sklearn.linear_model import LinearRegression \n# Fit model for Simple Linear Regression\nmodel = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance\nimport statsmodels.api as sm",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "y = data['Sales']\nfrom sklearn.linear_model import LinearRegression \n# Fit model for Simple Linear Regression\nmodel = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance\nimport statsmodels.api as sm\nX_with_const = sm.add_constant(X)  # Adds intercept",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance\nimport statsmodels.api as sm\nX_with_const = sm.add_constant(X)  # Adds intercept\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n# Model for Multiple Linear Regression",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X_with_const",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X_with_const = sm.add_constant(X)  # Adds intercept\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n# Model for Multiple Linear Regression\nX = data[['TV', 'Radio', 'Newspaper']]\ny = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model_sm",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n# Model for Multiple Linear Regression\nX = data[['TV', 'Radio', 'Newspaper']]\ny = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X = data[['TV', 'Radio', 'Newspaper']]\ny = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "y = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X_with_const",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model_sm",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)\npredictions = model_sig.predict(significant_X)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "significant_X",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "significant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)\npredictions = model_sig.predict(significant_X)\nprint(\"Predictions:\", predictions)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model_sig",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)\npredictions = model_sig.predict(significant_X)\nprint(\"Predictions:\", predictions)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "predictions",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "predictions = model_sig.predict(significant_X)\nprint(\"Predictions:\", predictions)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "vif_data",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "vif_data = pd.DataFrame()\nvif_data['Feature'] = X.columns\nvif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\nprint(vif_data)\n# #Handling Categorical Variables\n# X = pd.get_dummies(X, drop_first=True)\n# #Residual Analysis\n# residuals = y_test - y_pred\n# plt.scatter(y_pred, residuals)\n# plt.xlabel('Predicted')",
        "detail": "Regression",
        "documentation": {}
    },
    {
        "label": "vif_data['Feature']",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "vif_data['Feature'] = X.columns\nvif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\nprint(vif_data)\n# #Handling Categorical Variables\n# X = pd.get_dummies(X, drop_first=True)\n# #Residual Analysis\n# residuals = y_test - y_pred\n# plt.scatter(y_pred, residuals)\n# plt.xlabel('Predicted')\n# plt.ylabel('Residuals')",
        "detail": "Regression",
        "documentation": {}
    },
    {
        "label": "vif_data['VIF']",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "vif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\nprint(vif_data)\n# #Handling Categorical Variables\n# X = pd.get_dummies(X, drop_first=True)\n# #Residual Analysis\n# residuals = y_test - y_pred\n# plt.scatter(y_pred, residuals)\n# plt.xlabel('Predicted')\n# plt.ylabel('Residuals')\n# plt.title('Residuals vs. Predicted')",
        "detail": "Regression",
        "documentation": {}
    }
]