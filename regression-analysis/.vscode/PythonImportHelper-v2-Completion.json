[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "statsmodels.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statsmodels.api",
        "description": "statsmodels.api",
        "detail": "statsmodels.api",
        "documentation": {}
    },
    {
        "label": "fetch_california_housing",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "data = pd.read_csv('advertising_data_large.csv') \nX = data[['TV']] \ny = data['Sales']\nfrom sklearn.linear_model import LinearRegression \n# Fit model for Simple Linear Regression\nmodel = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X = data[['TV']] \ny = data['Sales']\nfrom sklearn.linear_model import LinearRegression \n# Fit model for Simple Linear Regression\nmodel = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance\nimport statsmodels.api as sm",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "y = data['Sales']\nfrom sklearn.linear_model import LinearRegression \n# Fit model for Simple Linear Regression\nmodel = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance\nimport statsmodels.api as sm\nX_with_const = sm.add_constant(X)  # Adds intercept",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model = LinearRegression() \nmodel.fit(X, y)\nprint(\"Coefficient (β1):\", model.coef_[0])\nprint(\"Intercept (β0):\", model.intercept_)\n#Statistical Signifcance\nimport statsmodels.api as sm\nX_with_const = sm.add_constant(X)  # Adds intercept\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n# Model for Multiple Linear Regression",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X_with_const",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X_with_const = sm.add_constant(X)  # Adds intercept\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n# Model for Multiple Linear Regression\nX = data[['TV', 'Radio', 'Newspaper']]\ny = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model_sm",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n# Model for Multiple Linear Regression\nX = data[['TV', 'Radio', 'Newspaper']]\ny = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X = data[['TV', 'Radio', 'Newspaper']]\ny = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "y = data['Sales']\nX_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "X_with_const",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "X_with_const = sm.add_constant(X)\nmodel_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model_sm",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model_sm = sm.OLS(y, X_with_const).fit()\nprint(model_sm.summary())\n#Confidence Intervals\n# Display confidence intervals\nprint(\"Confidence Intervals:\\n\", model_sm.conf_int())\n# Predict Sales with significant predictors (e.g., TV and Radio if significant)\nsignificant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)\npredictions = model_sig.predict(significant_X)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "significant_X",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "significant_X = X[['TV', 'Radio']]\nmodel_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)\npredictions = model_sig.predict(significant_X)\nprint(\"Predictions:\", predictions)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "model_sig",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "model_sig = LinearRegression()\nmodel_sig.fit(significant_X, y)\npredictions = model_sig.predict(significant_X)\nprint(\"Predictions:\", predictions)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "predictions",
        "kind": 5,
        "importPath": "Regression for Hypothesis Testing",
        "description": "Regression for Hypothesis Testing",
        "peekOfCode": "predictions = model_sig.predict(significant_X)\nprint(\"Predictions:\", predictions)",
        "detail": "Regression for Hypothesis Testing",
        "documentation": {}
    },
    {
        "label": "housing",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "housing = fetch_california_housing()\nX = pd.DataFrame(housing.data, columns=housing.feature_names)\ny = housing.target\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #spliting 20%\n# Fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)",
        "detail": "Regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "X = pd.DataFrame(housing.data, columns=housing.feature_names)\ny = housing.target\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #spliting 20%\n# Fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Check the coeefficients",
        "detail": "Regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "y = housing.target\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #spliting 20%\n# Fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Check the coeefficients\ncoeffs = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})",
        "detail": "Regression",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "model = LinearRegression()\nmodel.fit(X_train, y_train)\n# Check the coeefficients\ncoeffs = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})\nprint(coeffs)\n# # Evaluating MLR\n# from sklearn.metrics import mean_squared_error, r2_score\n# y_pred = model.predict(X_test)\n# mse = mean_squared_error(y_test, y_pred)\n# r2 = r2_score(y_test, y_pred)",
        "detail": "Regression",
        "documentation": {}
    },
    {
        "label": "coeffs",
        "kind": 5,
        "importPath": "Regression",
        "description": "Regression",
        "peekOfCode": "coeffs = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})\nprint(coeffs)\n# # Evaluating MLR\n# from sklearn.metrics import mean_squared_error, r2_score\n# y_pred = model.predict(X_test)\n# mse = mean_squared_error(y_test, y_pred)\n# r2 = r2_score(y_test, y_pred)\n# print('Mean Squared Error:', mse)\n# print('R-squared:', r2)\n# #VIF",
        "detail": "Regression",
        "documentation": {}
    }
]