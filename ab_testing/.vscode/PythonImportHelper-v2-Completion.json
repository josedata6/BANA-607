[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "chi2_contingency",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "n_users",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "n_users = 10000  # Large dataset\ngroups = ['A', 'B']\nconversions = [0, 1]\ndata = pd.DataFrame({\n    'UserID': np.arange(1, n_users + 1),\n    'Group': np.random.choice(groups, size=n_users, p=[0.5, 0.5]),\n    'Conversion': np.random.choice(conversions, size=n_users, p=[0.8, 0.2]),\n    'Time_On_Site': np.random.normal(loc=5, scale=2, size=n_users),\n    'Pages_Visited': np.random.poisson(lam=3, size=n_users),\n    'Purchase_Amount': np.random.normal(loc=50, scale=10, size=n_users)",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "groups",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "groups = ['A', 'B']\nconversions = [0, 1]\ndata = pd.DataFrame({\n    'UserID': np.arange(1, n_users + 1),\n    'Group': np.random.choice(groups, size=n_users, p=[0.5, 0.5]),\n    'Conversion': np.random.choice(conversions, size=n_users, p=[0.8, 0.2]),\n    'Time_On_Site': np.random.normal(loc=5, scale=2, size=n_users),\n    'Pages_Visited': np.random.poisson(lam=3, size=n_users),\n    'Purchase_Amount': np.random.normal(loc=50, scale=10, size=n_users)\n})",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "conversions",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "conversions = [0, 1]\ndata = pd.DataFrame({\n    'UserID': np.arange(1, n_users + 1),\n    'Group': np.random.choice(groups, size=n_users, p=[0.5, 0.5]),\n    'Conversion': np.random.choice(conversions, size=n_users, p=[0.8, 0.2]),\n    'Time_On_Site': np.random.normal(loc=5, scale=2, size=n_users),\n    'Pages_Visited': np.random.poisson(lam=3, size=n_users),\n    'Purchase_Amount': np.random.normal(loc=50, scale=10, size=n_users)\n})\n# print(data.head())",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "data = pd.DataFrame({\n    'UserID': np.arange(1, n_users + 1),\n    'Group': np.random.choice(groups, size=n_users, p=[0.5, 0.5]),\n    'Conversion': np.random.choice(conversions, size=n_users, p=[0.8, 0.2]),\n    'Time_On_Site': np.random.normal(loc=5, scale=2, size=n_users),\n    'Pages_Visited': np.random.poisson(lam=3, size=n_users),\n    'Purchase_Amount': np.random.normal(loc=50, scale=10, size=n_users)\n})\n# print(data.head())\n# # Independent T-Test",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "group_a",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "group_a = data[data['Group'] == 'A']['Purchase_Amount']\ngroup_b = data[data['Group'] == 'B']['Purchase_Amount']\n# t_stat, p_value = stats.ttest_ind(group_a, group_b)\n# print(f'T-Test Results: T-statistic: {t_stat}, P-value: {p_value}')\n# # F-Test (Levene's test for equal variances)\n# f_stat, f_p_value = stats.levene(group_a, group_b)\n# print(f'F-Test Results: F-statistic: {f_stat}, P-value: {f_p_value}')\n# # # Chi-Squared Test\nconversion_contingency = pd.crosstab(data['Group'], data['Conversion'])\nchi2_stat, chi2_p_val, dof, expected = chi2_contingency(conversion_contingency)",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "group_b",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "group_b = data[data['Group'] == 'B']['Purchase_Amount']\n# t_stat, p_value = stats.ttest_ind(group_a, group_b)\n# print(f'T-Test Results: T-statistic: {t_stat}, P-value: {p_value}')\n# # F-Test (Levene's test for equal variances)\n# f_stat, f_p_value = stats.levene(group_a, group_b)\n# print(f'F-Test Results: F-statistic: {f_stat}, P-value: {f_p_value}')\n# # # Chi-Squared Test\nconversion_contingency = pd.crosstab(data['Group'], data['Conversion'])\nchi2_stat, chi2_p_val, dof, expected = chi2_contingency(conversion_contingency)\nprint(f'Chi-Squared Test Results: Chi-squared stat: {chi2_stat}, P-value: {chi2_p_val}')",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "conversion_contingency",
        "kind": 5,
        "importPath": "ab_testing_hypothesis_testing",
        "description": "ab_testing_hypothesis_testing",
        "peekOfCode": "conversion_contingency = pd.crosstab(data['Group'], data['Conversion'])\nchi2_stat, chi2_p_val, dof, expected = chi2_contingency(conversion_contingency)\nprint(f'Chi-Squared Test Results: Chi-squared stat: {chi2_stat}, P-value: {chi2_p_val}')\n# # # Visualization - Boxplot for Purchase Amount\n# sns.boxplot(data=[group_a, group_b], notch=True)\n# plt.xticks([0, 1], ['Group A', 'Group B'])\n# plt.title('Distribution of Purchase Amounts by Group')\n# plt.show()\n# # Visualization - Bar Chart for Conversion Rates\n# conversion_rate_a = data[data['Group'] == 'A']['Conversion'].mean()",
        "detail": "ab_testing_hypothesis_testing",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "hypothesis_testing_code",
        "description": "hypothesis_testing_code",
        "peekOfCode": "df = pd.read_csv('hypothesis_testing_dataset.csv')\n# # Example T-test: Comparing Income based on Gender\n# group_male = df[df['Gender'] == 'Male']['Income']\n# group_female = df[df['Gender'] == 'Female']['Income']\n# t_stat, p_value = stats.ttest_ind(group_male, group_female)\n# print(f'T-Test Results: t-statistic = {t_stat}, p-value = {p_value}')\n# Example T-test: Comparing Income based on Gender\ngroup_male = df[df['Gender'] == 'Male']['Satisfaction_Score']\ngroup_female = df[df['Gender'] == 'Female']['Satisfaction_Score']\nt_stat, p_value = stats.ttest_ind(group_male, group_female)",
        "detail": "hypothesis_testing_code",
        "documentation": {}
    },
    {
        "label": "group_male",
        "kind": 5,
        "importPath": "hypothesis_testing_code",
        "description": "hypothesis_testing_code",
        "peekOfCode": "group_male = df[df['Gender'] == 'Male']['Satisfaction_Score']\ngroup_female = df[df['Gender'] == 'Female']['Satisfaction_Score']\nt_stat, p_value = stats.ttest_ind(group_male, group_female)\nprint(f'T-Test Results: t-statistic = {t_stat}, p-value = {p_value}')\n# # Example F-test: Comparing variances of Spending Score between Marital Status groups\n# married_group = df[df['Marital_Status'] == 'Married']['Spending_Score']\n# single_group = df[df['Marital_Status'] == 'Single']['Spending_Score']\n# f_stat, f_p_value = stats.levene(married_group, single_group)\n# print(f'F-Test Results: F-statistic = {f_stat}, p-value = {f_p_value}')\n# # Example F-test: Comparing variances of Spending Score between Marital Status groups",
        "detail": "hypothesis_testing_code",
        "documentation": {}
    },
    {
        "label": "group_female",
        "kind": 5,
        "importPath": "hypothesis_testing_code",
        "description": "hypothesis_testing_code",
        "peekOfCode": "group_female = df[df['Gender'] == 'Female']['Satisfaction_Score']\nt_stat, p_value = stats.ttest_ind(group_male, group_female)\nprint(f'T-Test Results: t-statistic = {t_stat}, p-value = {p_value}')\n# # Example F-test: Comparing variances of Spending Score between Marital Status groups\n# married_group = df[df['Marital_Status'] == 'Married']['Spending_Score']\n# single_group = df[df['Marital_Status'] == 'Single']['Spending_Score']\n# f_stat, f_p_value = stats.levene(married_group, single_group)\n# print(f'F-Test Results: F-statistic = {f_stat}, p-value = {f_p_value}')\n# # Example F-test: Comparing variances of Spending Score between Marital Status groups\n# master_group = df[df['Education_Level'] == 'Master']['Spending_Score']",
        "detail": "hypothesis_testing_code",
        "documentation": {}
    }
]