[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "statsmodels.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statsmodels.api",
        "description": "statsmodels.api",
        "detail": "statsmodels.api",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "forward_selection",
        "kind": 2,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "def forward_selection(X, y):\n    initial_features = []  # Start with no features\n    remaining_features = list(X.columns)  # All features available\n    selected_features = []\n    best_r2 = -1\n    while remaining_features:\n        best_feature = None\n        for feature in remaining_features:\n            # Fit model with current feature + already selected features\n            features_to_test = initial_features + [feature]",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "#df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "#df = pd.read_csv('ME2_Dataset.csv')\n#print(df)\n#################################\n##### Detect Missing Values #####\n#################################\n# # adding missing values from the Customer_ID column with recurring number\n# # # Step 1: Load the CSV file into a DataFrame\n# df = pd.read_csv(\"ME2_Dataset.csv\")\n# # Step 2: Convert the 'customer_ID' column to numerical values (if not already numeric)\n# df['Customer_ID'] = pd.to_numeric(df['Customer_ID'], errors='coerce')",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df = pd.read_csv(\"ME2_Dataset-v5.csv\")\n### 1. Income and Spending Score\n### H₀: There is no correlation between income and spending score.\n### H₁: There is a significant correlation between income and spending score.\n# Prepare data\n# X = df['Income']  # Independent variable\n# y = df['Spending_Score']  # Dependent variable\n# # Add constant for the regression model\n# X = sm.add_constant(X)\n# # Perform regression",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df = pd.read_csv(\"ME2_Dataset-v5.csv\")\n# Define dependent and independent variables\nX = df[['Spending_Score', 'Income', 'Online_Shopping_Frequency', \n        'Store_Visits_Per_Month', 'Customer_Rating']]\ny = df['Satisfaction_Score']\n# Forward Selection Function\ndef forward_selection(X, y):\n    initial_features = []  # Start with no features\n    remaining_features = list(X.columns)  # All features available\n    selected_features = []",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "X = df[['Spending_Score', 'Income', 'Online_Shopping_Frequency', \n        'Store_Visits_Per_Month', 'Customer_Rating']]\ny = df['Satisfaction_Score']\n# Forward Selection Function\ndef forward_selection(X, y):\n    initial_features = []  # Start with no features\n    remaining_features = list(X.columns)  # All features available\n    selected_features = []\n    best_r2 = -1\n    while remaining_features:",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "y = df['Satisfaction_Score']\n# Forward Selection Function\ndef forward_selection(X, y):\n    initial_features = []  # Start with no features\n    remaining_features = list(X.columns)  # All features available\n    selected_features = []\n    best_r2 = -1\n    while remaining_features:\n        best_feature = None\n        for feature in remaining_features:",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "selected_features",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "selected_features = forward_selection(X, y)\nprint(f\"Selected Features (Forward Selection): {selected_features}\")",
        "detail": "midterm2",
        "documentation": {}
    }
]