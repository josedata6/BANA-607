[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "statsmodels.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statsmodels.api",
        "description": "statsmodels.api",
        "detail": "statsmodels.api",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "backward_selection",
        "kind": 2,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "def backward_selection(X, y):\n    features = list(X.columns)\n    while len(features) > 0:\n        X_train_sm = sm.add_constant(X[features])\n        model = sm.OLS(y, X_train_sm).fit()\n        p_values = model.pvalues.iloc[1:]  # Exclude constant term\n        worst_pval = p_values.max()\n        if worst_pval > 0.05:  # Threshold for significance\n            worst_feature = p_values.idxmax()\n            features.remove(worst_feature)",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "#df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "#df = pd.read_csv('ME2_Dataset.csv')\n#print(df)\n#################################\n##### Detect Missing Values #####\n#################################\n# # adding missing values from the Customer_ID column with recurring number\n# # # Step 1: Load the CSV file into a DataFrame\n# df = pd.read_csv(\"ME2_Dataset.csv\")\n# # Step 2: Convert the 'customer_ID' column to numerical values (if not already numeric)\n# df['Customer_ID'] = pd.to_numeric(df['Customer_ID'], errors='coerce')",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df = pd.read_csv(\"ME2_Dataset-v5.csv\")\n### 1. Income and Spending Score\n### H₀: There is no correlation between income and spending score.\n### H₁: There is a significant correlation between income and spending score.\n# Prepare data\n# X = df['Income']  # Independent variable\n# y = df['Spending_Score']  # Dependent variable\n# # Add constant for the regression model\n# X = sm.add_constant(X)\n# # Perform regression",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "X = df[['Spending_Score', 'Income', 'Online_Shopping_Frequency', 'Store_Visits_Per_Month', 'Customer_Rating']]\ny = df['Satisfaction_Score']\n# Split data into training and testing sets\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# # Forward selection\n# def forward_selection(X, y):\n#     initial_features = []\n#     remaining_features = list(X.columns)\n#     selected_features = []\n#     current_score, best_new_score = float('inf'), float('inf')",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "y = df['Satisfaction_Score']\n# Split data into training and testing sets\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# # Forward selection\n# def forward_selection(X, y):\n#     initial_features = []\n#     remaining_features = list(X.columns)\n#     selected_features = []\n#     current_score, best_new_score = float('inf'), float('inf')\n#     while remaining_features:",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "selected_features_backward",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "selected_features_backward = backward_selection(X_train, y_train)\nprint(\"Selected features using backward selection:\", selected_features_backward)",
        "detail": "midterm2",
        "documentation": {}
    }
]