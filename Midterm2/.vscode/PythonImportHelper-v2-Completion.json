[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "#df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "#df = pd.read_csv('ME2_Dataset.csv')\n#print(df)\n##### Detect Missing Values #####\n# adding missing values from the Customer_ID column\n# Step 1: Load the CSV file into a DataFrame\ndf = pd.read_csv(\"ME2_Dataset.csv\")\n# Step 2: Convert the 'customer_ID' column to numerical values (if not already numeric)\ndf['Customer_ID'] = pd.to_numeric(df['Customer_ID'], errors='coerce')\n# Step 3: Identify the range of numbers that should be in the column\nmin_id, max_id = int(df['Customer_ID'].min()), int(df['Customer_ID'].max())  # Convert to integers",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df = pd.read_csv(\"ME2_Dataset.csv\")\n# Step 2: Convert the 'customer_ID' column to numerical values (if not already numeric)\ndf['Customer_ID'] = pd.to_numeric(df['Customer_ID'], errors='coerce')\n# Step 3: Identify the range of numbers that should be in the column\nmin_id, max_id = int(df['Customer_ID'].min()), int(df['Customer_ID'].max())  # Convert to integers\nexpected_ids = set(range(min_id, max_id + 1))\n# Step 4: Identify the missing numbers\nactual_ids = set(df['Customer_ID'].dropna().astype(int))  # Ensure existing IDs are integers\nmissing_ids = sorted(expected_ids - actual_ids)\n# Step 5: Fill in the missing rows",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df['Customer_ID']",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df['Customer_ID'] = pd.to_numeric(df['Customer_ID'], errors='coerce')\n# Step 3: Identify the range of numbers that should be in the column\nmin_id, max_id = int(df['Customer_ID'].min()), int(df['Customer_ID'].max())  # Convert to integers\nexpected_ids = set(range(min_id, max_id + 1))\n# Step 4: Identify the missing numbers\nactual_ids = set(df['Customer_ID'].dropna().astype(int))  # Ensure existing IDs are integers\nmissing_ids = sorted(expected_ids - actual_ids)\n# Step 5: Fill in the missing rows\n# Create a DataFrame with the missing IDs\nmissing_df = pd.DataFrame({'Customer_ID': missing_ids})",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "expected_ids",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "expected_ids = set(range(min_id, max_id + 1))\n# Step 4: Identify the missing numbers\nactual_ids = set(df['Customer_ID'].dropna().astype(int))  # Ensure existing IDs are integers\nmissing_ids = sorted(expected_ids - actual_ids)\n# Step 5: Fill in the missing rows\n# Create a DataFrame with the missing IDs\nmissing_df = pd.DataFrame({'Customer_ID': missing_ids})\n# Append the missing rows and sort the DataFrame by 'customer_ID'\ndf_filled = pd.concat([df, missing_df], ignore_index=True).sort_values(by='Customer_ID')\n# Reset the index after sorting",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "actual_ids",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "actual_ids = set(df['Customer_ID'].dropna().astype(int))  # Ensure existing IDs are integers\nmissing_ids = sorted(expected_ids - actual_ids)\n# Step 5: Fill in the missing rows\n# Create a DataFrame with the missing IDs\nmissing_df = pd.DataFrame({'Customer_ID': missing_ids})\n# Append the missing rows and sort the DataFrame by 'customer_ID'\ndf_filled = pd.concat([df, missing_df], ignore_index=True).sort_values(by='Customer_ID')\n# Reset the index after sorting\ndf_filled = df_filled.reset_index(drop=True)\n# Step 6: Save the updated DataFrame back to a CSV file (optional)",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "missing_ids",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "missing_ids = sorted(expected_ids - actual_ids)\n# Step 5: Fill in the missing rows\n# Create a DataFrame with the missing IDs\nmissing_df = pd.DataFrame({'Customer_ID': missing_ids})\n# Append the missing rows and sort the DataFrame by 'customer_ID'\ndf_filled = pd.concat([df, missing_df], ignore_index=True).sort_values(by='Customer_ID')\n# Reset the index after sorting\ndf_filled = df_filled.reset_index(drop=True)\n# Step 6: Save the updated DataFrame back to a CSV file (optional)\ndf_filled.to_csv(\"ME2_Dataset-v2.csv\", index=False)",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "missing_df",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "missing_df = pd.DataFrame({'Customer_ID': missing_ids})\n# Append the missing rows and sort the DataFrame by 'customer_ID'\ndf_filled = pd.concat([df, missing_df], ignore_index=True).sort_values(by='Customer_ID')\n# Reset the index after sorting\ndf_filled = df_filled.reset_index(drop=True)\n# Step 6: Save the updated DataFrame back to a CSV file (optional)\ndf_filled.to_csv(\"ME2_Dataset-v2.csv\", index=False)\nprint(df_filled)",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df_filled",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df_filled = pd.concat([df, missing_df], ignore_index=True).sort_values(by='Customer_ID')\n# Reset the index after sorting\ndf_filled = df_filled.reset_index(drop=True)\n# Step 6: Save the updated DataFrame back to a CSV file (optional)\ndf_filled.to_csv(\"ME2_Dataset-v2.csv\", index=False)\nprint(df_filled)",
        "detail": "midterm2",
        "documentation": {}
    },
    {
        "label": "df_filled",
        "kind": 5,
        "importPath": "midterm2",
        "description": "midterm2",
        "peekOfCode": "df_filled = df_filled.reset_index(drop=True)\n# Step 6: Save the updated DataFrame back to a CSV file (optional)\ndf_filled.to_csv(\"ME2_Dataset-v2.csv\", index=False)\nprint(df_filled)",
        "detail": "midterm2",
        "documentation": {}
    }
]